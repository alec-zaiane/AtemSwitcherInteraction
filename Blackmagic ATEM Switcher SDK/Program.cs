/* -LICENSE-START-
** Copyright (c) 2019 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/
using BMDSwitcherAPI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.Windows.Forms;


namespace SimpleSwitcher
{
	class Program
	{

        static long GetInputId(IBMDSwitcherInput input)
		{
			input.GetInputId(out long id);
			return id;
		}


        static void setStatCam(IBMDSwitcherKeyAdvancedChromaParameters chroma_params)
        {
            /*
             * ---------------------------------
                Sampled Colour: (0.6226 0.3406 0.3484 )
                Foreground: 0.127
                Background: 0.918
                Spill Suppress: 0.228
                Flare Suppress: 0.272
                Brightness : -0.178
                Contrast :0.064
                Saturation :1
                Red :-0.14
                Green :0
                Blue :0
             */
            //System.Threading.Thread.Sleep(1000);
            chroma_params.SetSampledColor(0.6226, 0.3406, 0.3484);
            chroma_params.SetForegroundLevel(0.127);
            chroma_params.SetBackgroundLevel(0.918);
            chroma_params.SetKeyEdge(0.804);
            chroma_params.SetSpillSuppress(0.228);
            chroma_params.SetFlareSuppress(0.272);
            chroma_params.SetBrightness(-0.178);
            chroma_params.SetContrast(0.064);
            chroma_params.SetSaturation(1);
            chroma_params.SetRed(-0.14);
            chroma_params.SetGreen(0);
            chroma_params.SetBlue(0);
        }

        static void setTrackedCam(IBMDSwitcherKeyAdvancedChromaParameters chroma_params)
        {
            /*
             * ---------------------------------
             * ---------------------------------
                Sampled Colour: (0.5374 0.4013 0.363 )
                Foreground: 0.079
                Background: 0.57
                Key Edge: 0.715
                Spill Suppress: 0.418
                Flare Suppress: 0.222
                Brightness : -0.126
                Contrast :0.064
                Saturation :1
                Red :-0.14
                Green :-0.304
                Blue :0.088
             */
            //System.Threading.Thread.Sleep(1000);
            chroma_params.SetSampledColor(0.5374, 0.4013, 0.363);
            chroma_params.SetForegroundLevel(0.079);
            chroma_params.SetBackgroundLevel(0.57);
            chroma_params.SetKeyEdge(0.715);
            chroma_params.SetSpillSuppress(0.418);
            chroma_params.SetFlareSuppress(0.222);
            chroma_params.SetBrightness(-0.126);
            chroma_params.SetContrast(0.064);
            chroma_params.SetSaturation(1);
            chroma_params.SetRed(-0.14);
            chroma_params.SetGreen(-0.304);
            chroma_params.SetBlue(0.088);
        }
        static void getStatCam(IBMDSwitcherKeyAdvancedChromaParameters chroma_params)
        {
            double y, cb, cr, foreground, background,  key_edge,  spill_supp,  flare_supp, brightness, contrast, saturation, red, blue, green ;
            chroma_params.GetSampledColor(out y, out cb,out cr);
            chroma_params.GetForegroundLevel(out foreground);
            chroma_params.GetBackgroundLevel(out background);
            chroma_params.GetKeyEdge(out key_edge);
            chroma_params.GetSpillSuppress(out spill_supp);
            chroma_params.GetFlareSuppress(out flare_supp);
            chroma_params.GetBrightness(out brightness);
            chroma_params.GetContrast(out contrast);
            chroma_params.GetSaturation(out saturation);
            chroma_params.GetRed(out red);
            chroma_params.GetBlue(out blue);
            chroma_params.GetGreen(out green);
            Console.WriteLine("Static Camera Key Settings:");
            Console.WriteLine("---------------------------------");
            Console.WriteLine("Sampled Colour: (" + y + " " + cb + " " + cr + " )");
            Console.WriteLine("Foreground: " + foreground);
            Console.WriteLine("Background: " + background);
            Console.WriteLine("Key Edge: " + key_edge);
            Console.WriteLine("Spill Suppress: " + spill_supp);
            Console.WriteLine("Flare Suppress: " + flare_supp);
            Console.WriteLine("Brightness : " + brightness);
            Console.WriteLine("Contrast :" + contrast);
            Console.WriteLine("Saturation :" + saturation);
            Console.WriteLine("Red :" + red);
            Console.WriteLine("Green :" + green);
            Console.WriteLine("Blue :" + blue);





            Console.WriteLine("---------------------------------");
        }

        static void getTrackedCam(IBMDSwitcherKeyAdvancedChromaParameters chroma_params)
        {
            double y, cb, cr, foreground, background, key_edge, spill_supp, flare_supp, brightness, contrast, saturation, red, blue, green;
            chroma_params.GetSampledColor(out y, out cb, out cr);
            chroma_params.GetForegroundLevel(out foreground);
            chroma_params.GetBackgroundLevel(out background);
            chroma_params.GetKeyEdge(out key_edge);
            chroma_params.GetSpillSuppress(out spill_supp);
            chroma_params.GetFlareSuppress(out flare_supp);
            chroma_params.GetBrightness(out brightness);
            chroma_params.GetContrast(out contrast);
            chroma_params.GetSaturation(out saturation);
            chroma_params.GetRed(out red);
            chroma_params.GetBlue(out blue);
            chroma_params.GetGreen(out green);
            Console.WriteLine("Tracked Camera Key Settings:");
            Console.WriteLine("---------------------------------");
            Console.WriteLine("Sampled Colour: (" + y + " " + cb + " " + cr + " )");
            Console.WriteLine("Foreground: " + foreground);
            Console.WriteLine("Background: " + background);
            Console.WriteLine("Key Edge: " + key_edge);
            Console.WriteLine("Spill Suppress: " + spill_supp);
            Console.WriteLine("Flare Suppress: " + flare_supp);
            Console.WriteLine("Brightness : " + brightness);
            Console.WriteLine("Contrast :" + contrast);
            Console.WriteLine("Saturation :" + saturation);
            Console.WriteLine("Red :" + red);
            Console.WriteLine("Green :" + green);
            Console.WriteLine("Blue :" + blue);
        }

        static void Main(string[] args)
		{
			// Create switcher discovery object
			IBMDSwitcherDiscovery discovery = new CBMDSwitcherDiscovery();

            Console.WriteLine("version 1.4");
			// Connect to switcher
			Console.Write("Enter switcher IP address: ");
            String switcherIP = "192.168.1.2";//Console.ReadLine();

			discovery.ConnectTo(switcherIP, out IBMDSwitcher switcher, out _BMDSwitcherConnectToFailure failureReason);
			Console.WriteLine("Connected to switcher");

			var atem = new AtemSwitcher(switcher);

			// Get reference to various objects
			IBMDSwitcherMixEffectBlock me0 = atem.MixEffectBlocks.FirstOrDefault();
			IBMDSwitcherKey switcher_key = atem.switcher_keyers.FirstOrDefault();
			IBMDSwitcherTransitionParameters me0TransitionParams = me0 as IBMDSwitcherTransitionParameters;
			IBMDSwitcherTransitionWipeParameters me0WipeTransitionParams = me0 as IBMDSwitcherTransitionWipeParameters;
			IBMDSwitcherInput input3 = atem.SwitcherInputs
										.Where((i, ret) => {
											i.GetPortType(out _BMDSwitcherPortType type);
											return type == _BMDSwitcherPortType.bmdSwitcherPortTypeExternal;
										})
										.ElementAt(4);


			long prevProgramId;
            //me0.GetProgramInput(out prevProgramId);
            //
			switcher_key.GetInputFill(out prevProgramId);
            IBMDSwitcherKeyIterator key_itr;
            IntPtr key_itr_ptr;
            Guid KeyItrIDD = typeof(IBMDSwitcherKeyIterator).GUID;
            me0.CreateIterator(ref KeyItrIDD, out key_itr_ptr);

            key_itr = (IBMDSwitcherKeyIterator)Marshal.GetObjectForIUnknown(key_itr_ptr);
            IBMDSwitcherKey upstreamkey;
            key_itr.Next(out upstreamkey);


            IBMDSwitcherKeyAdvancedChromaParameters chroma_params = (IBMDSwitcherKeyAdvancedChromaParameters)upstreamkey;

            long programId;
			while (true)
			{

                //switcher_key.GetInputFill(out programId);
                switcher_key.GetInputFill(out programId);
                //Console.WriteLine(programId);


                /*
                chroma_params.GetKeyEdge(out edge);
                Console.WriteLine("-------------------------------");
                Console.WriteLine(edge);
                Console.WriteLine("-------------------------------");
                */

                if (prevProgramId != programId)
                {
                    //Trigger Camera Change in Unreal
                    //Console.WriteLine(programId);



                    if (programId == 8 && prevProgramId == 7) break;

					prevProgramId = programId;
					//theoretically this is where we send outputs instead of sending to console ._. -Sam
					if (programId == 1)
					{
						SendKeys.SendWait("{2}");
                        Console.WriteLine("Switching to Tracked Cam!");
                        getTrackedCam(chroma_params);
                        setTrackedCam(chroma_params);

                    }   
					if(programId == 3)
                    {
						SendKeys.SendWait("{9}");
                        Console.WriteLine("Switching to Static Cam!");
                        getStatCam(chroma_params);
                        setStatCam(chroma_params);

                    }

	

				}

			}

			Console.Write("Press ENTER to exit...");
			Console.ReadLine();
		}
	}

    internal class AtemSwitcher
    {
        private IBMDSwitcher switcher;

        public AtemSwitcher(IBMDSwitcher switcher) => this.switcher = switcher;

        public IEnumerable<IBMDSwitcherMixEffectBlock> MixEffectBlocks
        {
            get
            {
                // Create a mix effect block iterator
                switcher.CreateIterator(typeof(IBMDSwitcherMixEffectBlockIterator).GUID, out IntPtr meIteratorPtr);
                IBMDSwitcherMixEffectBlockIterator meIterator = Marshal.GetObjectForIUnknown(meIteratorPtr) as IBMDSwitcherMixEffectBlockIterator;
                if (meIterator == null)
                    yield break;

                // Iterate through all mix effect blocks
                while (true)
                {
                    meIterator.Next(out IBMDSwitcherMixEffectBlock me);

                    if (me != null)
                        yield return me;
                    else
                        yield break;
                }
            }
        }
       
        

        public IEnumerable<IBMDSwitcherKey> switcher_keyers
        {
            get
            {
                var atem = new AtemSwitcher(switcher);
                IBMDSwitcherMixEffectBlock me0 = atem.MixEffectBlocks.FirstOrDefault();
                me0.CreateIterator(typeof(IBMDSwitcherKeyIterator).GUID, out IntPtr KeyPtr);
                IBMDSwitcherKeyIterator key_iterator = Marshal.GetObjectForIUnknown(KeyPtr) as IBMDSwitcherKeyIterator;
                if (key_iterator == null)
                {
                    yield break;
                }
                while (true)
                {
                    key_iterator.Next(out IBMDSwitcherKey key);
                    if (key != null)
                    {
                        yield return key;
                    }
                    else
                    {
                        yield break;
                    }

                }

            }

        }

        public IEnumerable<IBMDSwitcherInput> SwitcherInputs
		{
			get
			{
				// Create an input iterator
				switcher.CreateIterator(typeof(IBMDSwitcherInputIterator).GUID, out IntPtr inputIteratorPtr);
				IBMDSwitcherInputIterator inputIterator = Marshal.GetObjectForIUnknown(inputIteratorPtr) as IBMDSwitcherInputIterator;
				if (inputIterator == null)
					yield break;

				// Scan through all inputs
				while (true)
				{
					inputIterator.Next(out IBMDSwitcherInput input);

					if (input != null)
						yield return input;
					else
						yield break;
				}
			}
		}
	}
}
